pipeline {
    agent any

    environment {
        // Define environment variables if needed
        STAGING_SERVER = 'staging-server-address'
        PRODUCTION_SERVER = 'production-server-address'
        APP_NAME = 'your-app'
    }

    stages {
        stage('Build') {
            steps {
                script {
                    echo "Building the project using Maven"
                }
                // Build the project using Maven
                sh 'mvn clean install'
            }
        }

        stage('Unit and Integration Tests') {
            steps {
                script {
                    echo "Running unit and integration tests"
                }
                // Run Unit and Integration Tests using Maven
                sh 'mvn test'
                sh 'mvn verify'
            }
            post {
                success {
                    echo "Tests passed"
                }
                failure {
                    mail to: 'youremail@example.com',
                         subject: 'Test Failure Notification',
                         body: "Unit/Integration tests failed in Jenkins pipeline.",
                         attachLog: true
                }
            }
        }

        stage('Code Analysis') {
            steps {
                script {
                    echo "Running SonarQube analysis"
                }
                // SonarQube analysis
                sh 'mvn sonar:sonar'
            }
        }

        stage('Security Scan') {
            steps {
                script {
                    echo "Running OWASP Dependency Check"
                }
                // Run OWASP Dependency-Check
                sh 'mvn org.owasp:dependency-check-maven:check'
            }
            post {
                success {
                    echo "Security scan passed"
                }
                failure {
                    mail to: 'youremail@example.com',
                         subject: 'Security Scan Failure Notification',
                         body: "Security scan failed in Jenkins pipeline.",
                         attachLog: true
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                script {
                    echo "Deploying application to Staging"
                }
                // Use SSH or AWS CLI to deploy to staging server
                sh '''
                    scp target/${APP_NAME}.jar ec2-user@${STAGING_SERVER}:/path/to/deploy
                    ssh ec2-user@${STAGING_SERVER} "sudo systemctl restart ${APP_NAME}"
                '''
            }
        }

        stage('Integration Tests on Staging') {
            steps {
                script {
                    echo "Running integration tests on staging environment"
                }
                // Run integration tests in staging
                sh 'mvn verify -Dstaging'
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    echo "Deploying application to Production"
                }
                // Use SSH or AWS CLI to deploy to production server
                sh '''
                    scp target/${APP_NAME}.jar ec2-user@${PRODUCTION_SERVER}:/path/to/deploy
                    ssh ec2-user@${PRODUCTION_SERVER} "sudo systemctl restart ${APP_NAME}"
                '''
            }
        }
    }

    post {
        always {
            cleanWs() // Cleanup workspace
        }
    }
}
